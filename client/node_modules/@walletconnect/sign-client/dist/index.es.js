import ae from"pino";import{RELAYER_DEFAULT_PROTOCOL as ce,RELAYER_EVENTS as H,EXPIRER_EVENTS as pe,Store as U,Core as le}from"@walletconnect/core";import{getDefaultLoggerOptions as he,generateChildLogger as de,getLoggerContext as ge}from"@walletconnect/logger";import{IEngine as me,ISignClient as we}from"@walletconnect/types";import{TYPE_1 as ue,createDelayedPromise as T,engineEvent as l,getInternalError as c,calcExpiry as E,isValidObject as K,getRequiredNamespacesFromNamespaces as ye,getSdkError as _,isSessionCompatible as Se,isExpired as v,isValidParams as S,isUndefined as x,isValidRelays as Ie,isValidRequiredNamespaces as Ee,isValidNamespaces as z,isConformingNamespaces as F,isValidString as D,isValidErrorReason as _e,isValidRelay as Re,isValidController as Ne,isValidNamespacesChainId as Q,isValidRequest as Pe,isValidNamespacesRequest as qe,isValidRequestExpiry as ve,isValidResponse as fe,isValidEvent as Oe,isValidNamespacesEvent as Ve,parseExpirerTarget as Te,isValidId as xe,getAppMetadata as De}from"@walletconnect/utils";import Ae,{EventEmitter as be}from"events";import{THIRTY_DAYS as Le,SEVEN_DAYS as B,FIVE_MINUTES as m,ONE_DAY as f,THIRTY_SECONDS as W}from"@walletconnect/time";import{isJsonRpcResult as R,isJsonRpcError as N,formatJsonRpcRequest as Ce,formatJsonRpcResult as Ge,formatJsonRpcError as $e,isJsonRpcRequest as Me,isJsonRpcResponse as Ue}from"@walletconnect/jsonrpc-utils";const j="wc",Y=2,k="client",L=`${j}@${Y}:${k}:`,C={name:k,logger:"error",controller:!1,relayUrl:"wss://relay.walletconnect.com"},Ke={session_proposal:"session_proposal",session_update:"session_update",session_extend:"session_extend",session_ping:"session_ping",session_delete:"session_delete",session_expire:"session_expire",session_request:"session_request",session_request_sent:"session_request_sent",session_event:"session_event",proposal_expire:"proposal_expire"},ze={database:":memory:"},je={created:"history_created",updated:"history_updated",deleted:"history_deleted",sync:"history_sync"},Ye="history",ke="0.3",Z="proposal",Xe=Le,ee="Proposal expired",se="session",A=B,te="engine",O={wc_sessionPropose:{req:{ttl:m,prompt:!0,tag:1100},res:{ttl:m,prompt:!1,tag:1101}},wc_sessionSettle:{req:{ttl:m,prompt:!1,tag:1102},res:{ttl:m,prompt:!1,tag:1103}},wc_sessionUpdate:{req:{ttl:f,prompt:!1,tag:1104},res:{ttl:f,prompt:!1,tag:1105}},wc_sessionExtend:{req:{ttl:f,prompt:!1,tag:1106},res:{ttl:f,prompt:!1,tag:1107}},wc_sessionRequest:{req:{ttl:m,prompt:!0,tag:1108},res:{ttl:m,prompt:!1,tag:1109}},wc_sessionEvent:{req:{ttl:m,prompt:!0,tag:1110},res:{ttl:m,prompt:!1,tag:1111}},wc_sessionDelete:{req:{ttl:f,prompt:!1,tag:1112},res:{ttl:f,prompt:!1,tag:1113}},wc_sessionPing:{req:{ttl:W,prompt:!1,tag:1114},res:{ttl:W,prompt:!1,tag:1115}}},G={min:m,max:B},ie="request";var Je=Object.defineProperty,He=Object.defineProperties,Fe=Object.getOwnPropertyDescriptors,ne=Object.getOwnPropertySymbols,Qe=Object.prototype.hasOwnProperty,Be=Object.prototype.propertyIsEnumerable,oe=(d,n,e)=>n in d?Je(d,n,{enumerable:!0,configurable:!0,writable:!0,value:e}):d[n]=e,w=(d,n)=>{for(var e in n||(n={}))Qe.call(n,e)&&oe(d,e,n[e]);if(ne)for(var e of ne(n))Be.call(n,e)&&oe(d,e,n[e]);return d},X=(d,n)=>He(d,Fe(n));class We extends me{constructor(n){super(n),this.name=te,this.events=new Ae,this.initialized=!1,this.ignoredPayloadTypes=[ue],this.init=async()=>{this.initialized||(await this.cleanup(),this.registerRelayerEvents(),this.registerExpirerEvents(),this.client.core.pairing.register({methods:Object.keys(O)}),this.initialized=!0)},this.connect=async e=>{this.isInitialized();const s=X(w({},e),{requiredNamespaces:e.requiredNamespaces||{},optionalNamespaces:e.optionalNamespaces||{}});await this.isValidConnect(s);const{pairingTopic:t,requiredNamespaces:i,optionalNamespaces:o,sessionProperties:a,relays:r}=s;let p=t,h,I=!1;if(p&&(I=this.client.core.pairing.pairings.get(p).active),!p||!I){const{topic:q,uri:y}=await this.client.core.pairing.create();p=q,h=y}const g=await this.client.core.crypto.generateKeyPair(),P=w({requiredNamespaces:i,optionalNamespaces:o,relays:r??[{protocol:ce}],proposer:{publicKey:g,metadata:this.client.metadata}},a&&{sessionProperties:a}),{reject:u,resolve:V,done:M}=T(m,ee);if(this.events.once(l("session_connect"),async({error:q,session:y})=>{if(q)u(q);else if(y){y.self.publicKey=g;const J=X(w({},y),{requiredNamespaces:y.requiredNamespaces,optionalNamespaces:y.optionalNamespaces});await this.client.session.set(y.topic,J),await this.setExpiry(y.topic,y.expiry),p&&await this.client.core.pairing.updateMetadata({topic:p,metadata:y.peer.metadata}),V(J)}}),!p){const{message:q}=c("NO_MATCHING_KEY",`connect() pairing topic: ${p}`);throw new Error(q)}const b=await this.sendRequest(p,"wc_sessionPropose",P),re=E(m);return await this.setProposal(b,w({id:b,expiry:re},P)),{uri:h,approval:M}},this.pair=async e=>(this.isInitialized(),await this.client.core.pairing.pair(e)),this.approve=async e=>{this.isInitialized(),await this.isValidApprove(e);const{id:s,relayProtocol:t,namespaces:i,sessionProperties:o}=e,a=this.client.proposal.get(s);let{pairingTopic:r,proposer:p,requiredNamespaces:h,optionalNamespaces:I}=a;r=r||"",K(h)||(h=ye(i,"approve()"));const g=await this.client.core.crypto.generateKeyPair(),P=p.publicKey,u=await this.client.core.crypto.generateSharedKey(g,P);r&&s&&(await this.client.core.pairing.updateMetadata({topic:r,metadata:p.metadata}),await this.sendResult(s,r,{relay:{protocol:t??"irn"},responderPublicKey:g}),await this.client.proposal.delete(s,_("USER_DISCONNECTED")),await this.client.core.pairing.activate({topic:r}));const V=w({relay:{protocol:t??"irn"},namespaces:i,requiredNamespaces:h,optionalNamespaces:I,pairingTopic:r,controller:{publicKey:g,metadata:this.client.metadata},expiry:E(A)},o&&{sessionProperties:o});await this.client.core.relayer.subscribe(u),await this.sendRequest(u,"wc_sessionSettle",V);const M=X(w({},V),{topic:u,pairingTopic:r,acknowledged:!1,self:V.controller,peer:{publicKey:p.publicKey,metadata:p.metadata},controller:g});return await this.client.session.set(u,M),await this.setExpiry(u,E(A)),{topic:u,acknowledged:()=>new Promise(b=>b(this.client.session.get(u)))}},this.reject=async e=>{this.isInitialized(),await this.isValidReject(e);const{id:s,reason:t}=e,{pairingTopic:i}=this.client.proposal.get(s);i&&(await this.sendError(s,i,t),await this.client.proposal.delete(s,_("USER_DISCONNECTED")))},this.update=async e=>{this.isInitialized(),await this.isValidUpdate(e);const{topic:s,namespaces:t}=e,i=await this.sendRequest(s,"wc_sessionUpdate",{namespaces:t}),{done:o,resolve:a,reject:r}=T();return this.events.once(l("session_update",i),({error:p})=>{p?r(p):a()}),await this.client.session.update(s,{namespaces:t}),{acknowledged:o}},this.extend=async e=>{this.isInitialized(),await this.isValidExtend(e);const{topic:s}=e,t=await this.sendRequest(s,"wc_sessionExtend",{}),{done:i,resolve:o,reject:a}=T();return this.events.once(l("session_extend",t),({error:r})=>{r?a(r):o()}),await this.setExpiry(s,E(A)),{acknowledged:i}},this.request=async e=>{this.isInitialized(),await this.isValidRequest(e);const{chainId:s,request:t,topic:i,expiry:o}=e,a=await this.sendRequest(i,"wc_sessionRequest",{request:t,chainId:s},o),{done:r,resolve:p,reject:h}=T(o);return this.events.once(l("session_request",a),({error:I,result:g})=>{I?h(I):p(g)}),this.client.events.emit("session_request_sent",{topic:i,request:t,chainId:s,id:a}),await r()},this.respond=async e=>{this.isInitialized(),await this.isValidRespond(e);const{topic:s,response:t}=e,{id:i}=t;R(t)?await this.sendResult(i,s,t.result):N(t)&&await this.sendError(i,s,t.error),this.deletePendingSessionRequest(e.response.id,{message:"fulfilled",code:0})},this.ping=async e=>{this.isInitialized(),await this.isValidPing(e);const{topic:s}=e;if(this.client.session.keys.includes(s)){const t=await this.sendRequest(s,"wc_sessionPing",{}),{done:i,resolve:o,reject:a}=T();this.events.once(l("session_ping",t),({error:r})=>{r?a(r):o()}),await i()}else this.client.core.pairing.pairings.keys.includes(s)&&await this.client.core.pairing.ping({topic:s})},this.emit=async e=>{this.isInitialized(),await this.isValidEmit(e);const{topic:s,event:t,chainId:i}=e;await this.sendRequest(s,"wc_sessionEvent",{event:t,chainId:i})},this.disconnect=async e=>{this.isInitialized(),await this.isValidDisconnect(e);const{topic:s}=e;this.client.session.keys.includes(s)?(await this.sendRequest(s,"wc_sessionDelete",_("USER_DISCONNECTED")),await this.deleteSession(s)):await this.client.core.pairing.disconnect({topic:s})},this.find=e=>(this.isInitialized(),this.client.session.getAll().filter(s=>Se(s,e))),this.getPendingSessionRequests=()=>(this.isInitialized(),this.client.pendingRequest.getAll()),this.deleteSession=async(e,s)=>{const{self:t}=this.client.session.get(e);await this.client.core.relayer.unsubscribe(e),await Promise.all([this.client.session.delete(e,_("USER_DISCONNECTED")),this.client.core.crypto.deleteKeyPair(t.publicKey),this.client.core.crypto.deleteSymKey(e),s?Promise.resolve():this.client.core.expirer.del(e)])},this.deleteProposal=async(e,s)=>{await Promise.all([this.client.proposal.delete(e,_("USER_DISCONNECTED")),s?Promise.resolve():this.client.core.expirer.del(e)])},this.deletePendingSessionRequest=async(e,s,t=!1)=>{await Promise.all([this.client.pendingRequest.delete(e,s),t?Promise.resolve():this.client.core.expirer.del(e)])},this.setExpiry=async(e,s)=>{this.client.session.keys.includes(e)&&await this.client.session.update(e,{expiry:s}),this.client.core.expirer.set(e,s)},this.setProposal=async(e,s)=>{await this.client.proposal.set(e,s),this.client.core.expirer.set(e,s.expiry)},this.setPendingSessionRequest=async e=>{const s=O.wc_sessionRequest.req.ttl,{id:t,topic:i,params:o}=e;await this.client.pendingRequest.set(t,{id:t,topic:i,params:o}),s&&this.client.core.expirer.set(t,E(s))},this.sendRequest=async(e,s,t,i)=>{const o=Ce(s,t),a=await this.client.core.crypto.encode(e,o),r=O[s].req;return i&&(r.ttl=i),this.client.core.history.set(e,o),this.client.core.relayer.publish(e,a,r),o.id},this.sendResult=async(e,s,t)=>{const i=Ge(e,t),o=await this.client.core.crypto.encode(s,i),a=await this.client.core.history.get(s,e),r=O[a.request.method].res;this.client.core.relayer.publish(s,o,r),await this.client.core.history.resolve(i)},this.sendError=async(e,s,t)=>{const i=$e(e,t),o=await this.client.core.crypto.encode(s,i),a=await this.client.core.history.get(s,e),r=O[a.request.method].res;this.client.core.relayer.publish(s,o,r),await this.client.core.history.resolve(i)},this.cleanup=async()=>{const e=[],s=[];this.client.session.getAll().forEach(t=>{v(t.expiry)&&e.push(t.topic)}),this.client.proposal.getAll().forEach(t=>{v(t.expiry)&&s.push(t.id)}),await Promise.all([...e.map(t=>this.deleteSession(t)),...s.map(t=>this.deleteProposal(t))])},this.onRelayEventRequest=e=>{const{topic:s,payload:t}=e,i=t.method;switch(i){case"wc_sessionPropose":return this.onSessionProposeRequest(s,t);case"wc_sessionSettle":return this.onSessionSettleRequest(s,t);case"wc_sessionUpdate":return this.onSessionUpdateRequest(s,t);case"wc_sessionExtend":return this.onSessionExtendRequest(s,t);case"wc_sessionPing":return this.onSessionPingRequest(s,t);case"wc_sessionDelete":return this.onSessionDeleteRequest(s,t);case"wc_sessionRequest":return this.onSessionRequest(s,t);case"wc_sessionEvent":return this.onSessionEventRequest(s,t);default:return this.client.logger.info(`Unsupported request method ${i}`)}},this.onRelayEventResponse=async e=>{const{topic:s,payload:t}=e,i=(await this.client.core.history.get(s,t.id)).request.method;switch(i){case"wc_sessionPropose":return this.onSessionProposeResponse(s,t);case"wc_sessionSettle":return this.onSessionSettleResponse(s,t);case"wc_sessionUpdate":return this.onSessionUpdateResponse(s,t);case"wc_sessionExtend":return this.onSessionExtendResponse(s,t);case"wc_sessionPing":return this.onSessionPingResponse(s,t);case"wc_sessionRequest":return this.onSessionRequestResponse(s,t);default:return this.client.logger.info(`Unsupported response method ${i}`)}},this.onSessionProposeRequest=async(e,s)=>{const{params:t,id:i}=s;try{this.isValidConnect(w({},s.params));const o=E(m),a=w({id:i,pairingTopic:e,expiry:o},t);await this.setProposal(i,a),this.client.events.emit("session_proposal",{id:i,params:a})}catch(o){await this.sendError(i,e,o),this.client.logger.error(o)}},this.onSessionProposeResponse=async(e,s)=>{const{id:t}=s;if(R(s)){const{result:i}=s;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",result:i});const o=this.client.proposal.get(t);this.client.logger.trace({type:"method",method:"onSessionProposeResponse",proposal:o});const a=o.proposer.publicKey;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",selfPublicKey:a});const r=i.responderPublicKey;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",peerPublicKey:r});const p=await this.client.core.crypto.generateSharedKey(a,r);this.client.logger.trace({type:"method",method:"onSessionProposeResponse",sessionTopic:p});const h=await this.client.core.relayer.subscribe(p);this.client.logger.trace({type:"method",method:"onSessionProposeResponse",subscriptionId:h}),await this.client.core.pairing.activate({topic:e})}else N(s)&&(await this.client.proposal.delete(t,_("USER_DISCONNECTED")),this.events.emit(l("session_connect"),{error:s.error}))},this.onSessionSettleRequest=async(e,s)=>{const{id:t,params:i}=s;try{this.isValidSessionSettleRequest(i);const{relay:o,controller:a,expiry:r,namespaces:p,requiredNamespaces:h,optionalNamespaces:I,sessionProperties:g,pairingTopic:P}=s.params,u=w({topic:e,relay:o,expiry:r,namespaces:p,acknowledged:!0,pairingTopic:P,requiredNamespaces:h,optionalNamespaces:I,controller:a.publicKey,self:{publicKey:"",metadata:this.client.metadata},peer:{publicKey:a.publicKey,metadata:a.metadata}},g&&{sessionProperties:g});await this.sendResult(s.id,e,!0),this.events.emit(l("session_connect"),{session:u})}catch(o){await this.sendError(t,e,o),this.client.logger.error(o)}},this.onSessionSettleResponse=async(e,s)=>{const{id:t}=s;R(s)?(await this.client.session.update(e,{acknowledged:!0}),this.events.emit(l("session_approve",t),{})):N(s)&&(await this.client.session.delete(e,_("USER_DISCONNECTED")),this.events.emit(l("session_approve",t),{error:s.error}))},this.onSessionUpdateRequest=async(e,s)=>{const{params:t,id:i}=s;try{this.isValidUpdate(w({topic:e},t)),await this.client.session.update(e,{namespaces:t.namespaces}),await this.sendResult(i,e,!0),this.client.events.emit("session_update",{id:i,topic:e,params:t})}catch(o){await this.sendError(i,e,o),this.client.logger.error(o)}},this.onSessionUpdateResponse=(e,s)=>{const{id:t}=s;R(s)?this.events.emit(l("session_update",t),{}):N(s)&&this.events.emit(l("session_update",t),{error:s.error})},this.onSessionExtendRequest=async(e,s)=>{const{id:t}=s;try{this.isValidExtend({topic:e}),await this.setExpiry(e,E(A)),await this.sendResult(t,e,!0),this.client.events.emit("session_extend",{id:t,topic:e})}catch(i){await this.sendError(t,e,i),this.client.logger.error(i)}},this.onSessionExtendResponse=(e,s)=>{const{id:t}=s;R(s)?this.events.emit(l("session_extend",t),{}):N(s)&&this.events.emit(l("session_extend",t),{error:s.error})},this.onSessionPingRequest=async(e,s)=>{const{id:t}=s;try{this.isValidPing({topic:e}),await this.sendResult(t,e,!0),this.client.events.emit("session_ping",{id:t,topic:e})}catch(i){await this.sendError(t,e,i),this.client.logger.error(i)}},this.onSessionPingResponse=(e,s)=>{const{id:t}=s;setTimeout(()=>{R(s)?this.events.emit(l("session_ping",t),{}):N(s)&&this.events.emit(l("session_ping",t),{error:s.error})},500)},this.onSessionDeleteRequest=async(e,s)=>{const{id:t}=s;try{this.isValidDisconnect({topic:e,reason:s.params}),this.client.core.relayer.once(H.publish,async()=>{await this.deleteSession(e)}),await this.sendResult(t,e,!0),this.client.events.emit("session_delete",{id:t,topic:e})}catch(i){await this.sendError(t,e,i),this.client.logger.error(i)}},this.onSessionRequest=async(e,s)=>{const{id:t,params:i}=s;try{this.isValidRequest(w({topic:e},i)),await this.setPendingSessionRequest({id:t,topic:e,params:i}),this.client.events.emit("session_request",{id:t,topic:e,params:i})}catch(o){await this.sendError(t,e,o),this.client.logger.error(o)}},this.onSessionRequestResponse=(e,s)=>{const{id:t}=s;R(s)?this.events.emit(l("session_request",t),{result:s.result}):N(s)&&this.events.emit(l("session_request",t),{error:s.error})},this.onSessionEventRequest=async(e,s)=>{const{id:t,params:i}=s;try{this.isValidEmit(w({topic:e},i)),this.client.events.emit("session_event",{id:t,topic:e,params:i})}catch(o){await this.sendError(t,e,o),this.client.logger.error(o)}},this.isValidConnect=async e=>{if(!S(e)){const{message:r}=c("MISSING_OR_INVALID",`connect() params: ${JSON.stringify(e)}`);throw new Error(r)}const{pairingTopic:s,requiredNamespaces:t,optionalNamespaces:i,sessionProperties:o,relays:a}=e;if(x(s)||await this.isValidPairingTopic(s),!Ie(a,!0)){const{message:r}=c("MISSING_OR_INVALID",`connect() relays: ${a}`);throw new Error(r)}!x(t)&&K(t)!==0&&this.validateNamespaces(t,"requiredNamespaces"),!x(i)&&K(i)!==0&&this.validateNamespaces(i,"optionalNamespaces"),x(o)||this.validateSessionProps(o,"sessionProperties")},this.validateNamespaces=(e,s)=>{const t=Ee(e,"connect()",s);if(t)throw new Error(t.message)},this.isValidApprove=async e=>{if(!S(e))throw new Error(c("MISSING_OR_INVALID",`approve() params: ${e}`).message);const{id:s,namespaces:t,relayProtocol:i,sessionProperties:o}=e;await this.isValidProposalId(s);const a=this.client.proposal.get(s),r=z(t,"approve()");if(r)throw new Error(r.message);const p=F(a.requiredNamespaces,t,"approve()");if(p)throw new Error(p.message);if(!D(i,!0)){const{message:h}=c("MISSING_OR_INVALID",`approve() relayProtocol: ${i}`);throw new Error(h)}x(o)||this.validateSessionProps(o,"sessionProperties")},this.isValidReject=async e=>{if(!S(e)){const{message:i}=c("MISSING_OR_INVALID",`reject() params: ${e}`);throw new Error(i)}const{id:s,reason:t}=e;if(await this.isValidProposalId(s),!_e(t)){const{message:i}=c("MISSING_OR_INVALID",`reject() reason: ${JSON.stringify(t)}`);throw new Error(i)}},this.isValidSessionSettleRequest=e=>{if(!S(e)){const{message:p}=c("MISSING_OR_INVALID",`onSessionSettleRequest() params: ${e}`);throw new Error(p)}const{relay:s,controller:t,namespaces:i,expiry:o}=e;if(!Re(s)){const{message:p}=c("MISSING_OR_INVALID","onSessionSettleRequest() relay protocol should be a string");throw new Error(p)}const a=Ne(t,"onSessionSettleRequest()");if(a)throw new Error(a.message);const r=z(i,"onSessionSettleRequest()");if(r)throw new Error(r.message);if(v(o)){const{message:p}=c("EXPIRED","onSessionSettleRequest()");throw new Error(p)}},this.isValidUpdate=async e=>{if(!S(e)){const{message:r}=c("MISSING_OR_INVALID",`update() params: ${e}`);throw new Error(r)}const{topic:s,namespaces:t}=e;await this.isValidSessionTopic(s);const i=this.client.session.get(s),o=z(t,"update()");if(o)throw new Error(o.message);const a=F(i.requiredNamespaces,t,"update()");if(a)throw new Error(a.message)},this.isValidExtend=async e=>{if(!S(e)){const{message:t}=c("MISSING_OR_INVALID",`extend() params: ${e}`);throw new Error(t)}const{topic:s}=e;await this.isValidSessionTopic(s)},this.isValidRequest=async e=>{if(!S(e)){const{message:r}=c("MISSING_OR_INVALID",`request() params: ${e}`);throw new Error(r)}const{topic:s,request:t,chainId:i,expiry:o}=e;await this.isValidSessionTopic(s);const{namespaces:a}=this.client.session.get(s);if(!Q(a,i)){const{message:r}=c("MISSING_OR_INVALID",`request() chainId: ${i}`);throw new Error(r)}if(!Pe(t)){const{message:r}=c("MISSING_OR_INVALID",`request() ${JSON.stringify(t)}`);throw new Error(r)}if(!qe(a,i,t.method)){const{message:r}=c("MISSING_OR_INVALID",`request() method: ${t.method}`);throw new Error(r)}if(o&&!ve(o,G)){const{message:r}=c("MISSING_OR_INVALID",`request() expiry: ${o}. Expiry must be a number (in seconds) between ${G.min} and ${G.max}`);throw new Error(r)}},this.isValidRespond=async e=>{if(!S(e)){const{message:i}=c("MISSING_OR_INVALID",`respond() params: ${e}`);throw new Error(i)}const{topic:s,response:t}=e;if(await this.isValidSessionTopic(s),!fe(t)){const{message:i}=c("MISSING_OR_INVALID",`respond() response: ${JSON.stringify(t)}`);throw new Error(i)}},this.isValidPing=async e=>{if(!S(e)){const{message:t}=c("MISSING_OR_INVALID",`ping() params: ${e}`);throw new Error(t)}const{topic:s}=e;await this.isValidSessionOrPairingTopic(s)},this.isValidEmit=async e=>{if(!S(e)){const{message:a}=c("MISSING_OR_INVALID",`emit() params: ${e}`);throw new Error(a)}const{topic:s,event:t,chainId:i}=e;await this.isValidSessionTopic(s);const{namespaces:o}=this.client.session.get(s);if(!Q(o,i)){const{message:a}=c("MISSING_OR_INVALID",`emit() chainId: ${i}`);throw new Error(a)}if(!Oe(t)){const{message:a}=c("MISSING_OR_INVALID",`emit() event: ${JSON.stringify(t)}`);throw new Error(a)}if(!Ve(o,i,t.name)){const{message:a}=c("MISSING_OR_INVALID",`emit() event: ${JSON.stringify(t)}`);throw new Error(a)}},this.isValidDisconnect=async e=>{if(!S(e)){const{message:t}=c("MISSING_OR_INVALID",`disconnect() params: ${e}`);throw new Error(t)}const{topic:s}=e;await this.isValidSessionOrPairingTopic(s)},this.validateSessionProps=(e,s)=>{Object.values(e).forEach(t=>{if(!D(t,!1)){const{message:i}=c("MISSING_OR_INVALID",`${s} must be in Record<string, string> format. Received: ${JSON.stringify(t)}`);throw new Error(i)}})}}isInitialized(){if(!this.initialized){const{message:n}=c("NOT_INITIALIZED",this.name);throw new Error(n)}}registerRelayerEvents(){this.client.core.relayer.on(H.message,async n=>{const{topic:e,message:s}=n;if(this.ignoredPayloadTypes.includes(this.client.core.crypto.getPayloadType(s)))return;const t=await this.client.core.crypto.decode(e,s);Me(t)?(this.client.core.history.set(e,t),this.onRelayEventRequest({topic:e,payload:t})):Ue(t)&&(await this.client.core.history.resolve(t),this.onRelayEventResponse({topic:e,payload:t}))})}registerExpirerEvents(){this.client.core.expirer.on(pe.expired,async n=>{const{topic:e,id:s}=Te(n.target);if(s&&this.client.pendingRequest.keys.includes(s))return await this.deletePendingSessionRequest(s,c("EXPIRED"),!0);e?this.client.session.keys.includes(e)&&(await this.deleteSession(e,!0),this.client.events.emit("session_expire",{topic:e})):s&&(await this.deleteProposal(s,!0),this.client.events.emit("proposal_expire",{id:s}))})}isValidPairingTopic(n){if(!D(n,!1)){const{message:e}=c("MISSING_OR_INVALID",`pairing topic should be a string: ${n}`);throw new Error(e)}if(!this.client.core.pairing.pairings.keys.includes(n)){const{message:e}=c("NO_MATCHING_KEY",`pairing topic doesn't exist: ${n}`);throw new Error(e)}if(v(this.client.core.pairing.pairings.get(n).expiry)){const{message:e}=c("EXPIRED",`pairing topic: ${n}`);throw new Error(e)}}async isValidSessionTopic(n){if(!D(n,!1)){const{message:e}=c("MISSING_OR_INVALID",`session topic should be a string: ${n}`);throw new Error(e)}if(!this.client.session.keys.includes(n)){const{message:e}=c("NO_MATCHING_KEY",`session topic doesn't exist: ${n}`);throw new Error(e)}if(v(this.client.session.get(n).expiry)){await this.deleteSession(n);const{message:e}=c("EXPIRED",`session topic: ${n}`);throw new Error(e)}}async isValidSessionOrPairingTopic(n){if(this.client.session.keys.includes(n))await this.isValidSessionTopic(n);else if(this.client.core.pairing.pairings.keys.includes(n))this.isValidPairingTopic(n);else if(D(n,!1)){const{message:e}=c("NO_MATCHING_KEY",`session or pairing topic doesn't exist: ${n}`);throw new Error(e)}else{const{message:e}=c("MISSING_OR_INVALID",`session or pairing topic should be a string: ${n}`);throw new Error(e)}}async isValidProposalId(n){if(!xe(n)){const{message:e}=c("MISSING_OR_INVALID",`proposal id should be a number: ${n}`);throw new Error(e)}if(!this.client.proposal.keys.includes(n)){const{message:e}=c("NO_MATCHING_KEY",`proposal id doesn't exist: ${n}`);throw new Error(e)}if(v(this.client.proposal.get(n).expiry)){await this.deleteProposal(n);const{message:e}=c("EXPIRED",`proposal id: ${n}`);throw new Error(e)}}}class Ze extends U{constructor(n,e){super(n,e,Z,L),this.core=n,this.logger=e}}class es extends U{constructor(n,e){super(n,e,se,L),this.core=n,this.logger=e}}class ss extends U{constructor(n,e){super(n,e,ie,L,s=>s.id),this.core=n,this.logger=e}}class $ extends we{constructor(n){super(n),this.protocol=j,this.version=Y,this.name=C.name,this.events=new be,this.on=(s,t)=>this.events.on(s,t),this.once=(s,t)=>this.events.once(s,t),this.off=(s,t)=>this.events.off(s,t),this.removeListener=(s,t)=>this.events.removeListener(s,t),this.removeAllListeners=s=>this.events.removeAllListeners(s),this.connect=async s=>{try{return await this.engine.connect(s)}catch(t){throw this.logger.error(t.message),t}},this.pair=async s=>{try{return await this.engine.pair(s)}catch(t){throw this.logger.error(t.message),t}},this.approve=async s=>{try{return await this.engine.approve(s)}catch(t){throw this.logger.error(t.message),t}},this.reject=async s=>{try{return await this.engine.reject(s)}catch(t){throw this.logger.error(t.message),t}},this.update=async s=>{try{return await this.engine.update(s)}catch(t){throw this.logger.error(t.message),t}},this.extend=async s=>{try{return await this.engine.extend(s)}catch(t){throw this.logger.error(t.message),t}},this.request=async s=>{try{return await this.engine.request(s)}catch(t){throw this.logger.error(t.message),t}},this.respond=async s=>{try{return await this.engine.respond(s)}catch(t){throw this.logger.error(t.message),t}},this.ping=async s=>{try{return await this.engine.ping(s)}catch(t){throw this.logger.error(t.message),t}},this.emit=async s=>{try{return await this.engine.emit(s)}catch(t){throw this.logger.error(t.message),t}},this.disconnect=async s=>{try{return await this.engine.disconnect(s)}catch(t){throw this.logger.error(t.message),t}},this.find=s=>{try{return this.engine.find(s)}catch(t){throw this.logger.error(t.message),t}},this.getPendingSessionRequests=()=>{try{return this.engine.getPendingSessionRequests()}catch(s){throw this.logger.error(s.message),s}},this.name=n?.name||C.name,this.metadata=n?.metadata||De();const e=typeof n?.logger<"u"&&typeof n?.logger!="string"?n.logger:ae(he({level:n?.logger||C.logger}));this.core=n?.core||new le(n),this.logger=de(e,this.name),this.session=new es(this.core,this.logger),this.proposal=new Ze(this.core,this.logger),this.pendingRequest=new ss(this.core,this.logger),this.engine=new We(this)}static async init(n){const e=new $(n);return await e.initialize(),e}get context(){return ge(this.logger)}get pairing(){return this.core.pairing.pairings}async initialize(){this.logger.trace("Initialized");try{await this.core.start(),await this.session.init(),await this.proposal.init(),await this.pendingRequest.init(),await this.engine.init(),this.logger.info("SignClient Initialization Success")}catch(n){throw this.logger.info("SignClient Initialization Failure"),this.logger.error(n.message),n}}}const ts=$;export{te as ENGINE_CONTEXT,O as ENGINE_RPC_OPTS,Ye as HISTORY_CONTEXT,je as HISTORY_EVENTS,ke as HISTORY_STORAGE_VERSION,Z as PROPOSAL_CONTEXT,Xe as PROPOSAL_EXPIRY,ee as PROPOSAL_EXPIRY_MESSAGE,ie as REQUEST_CONTEXT,se as SESSION_CONTEXT,A as SESSION_EXPIRY,G as SESSION_REQUEST_EXPIRY_BOUNDARIES,k as SIGN_CLIENT_CONTEXT,C as SIGN_CLIENT_DEFAULT,Ke as SIGN_CLIENT_EVENTS,j as SIGN_CLIENT_PROTOCOL,ze as SIGN_CLIENT_STORAGE_OPTIONS,L as SIGN_CLIENT_STORAGE_PREFIX,Y as SIGN_CLIENT_VERSION,ts as SignClient,$ as default};
//# sourceMappingURL=index.es.js.map

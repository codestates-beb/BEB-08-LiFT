"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var moralis_1 = __importDefault(require("moralis"));
var moralisNextAuthHandler_1 = require("../auth/moralisNextAuthHandler");
var Modules_1 = require("./Modules");
var common_core_1 = require("@moralisweb3/common-core");
var serverLogger_1 = require("../serverLogger");
moralis_1.default.Core.config.set('product', 'NextJS SDK');
var FALLBACK_ERROR_MESSAGE = 'Internal Server Error';
function MoralisNextHandler(_a) {
    var _b;
    var req = _a.req, res = _a.res, authentication = _a.authentication, core = _a.core;
    return __awaiter(this, void 0, void 0, function () {
        var _c, moduleName, operationName, module_1, operation, deserialisedRequest, requestHandler, response, error_1, statusCode, message;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _c = req.query.moralis, moduleName = _c[0], operationName = _c[1];
                    _d.label = 1;
                case 1:
                    _d.trys.push([1, 6, , 7]);
                    module_1 = (0, Modules_1.getModuleByName)(moduleName);
                    operation = module_1.getOperationByName(operationName);
                    deserialisedRequest = operation.deserializeRequest(req.body, core);
                    requestHandler = module_1.getRequestHandler(operation, core);
                    if (!requestHandler) {
                        return [2 /*return*/, res.status(400).json({ error: "Operation ".concat(moduleName, "/").concat(operationName, " is not supported") })];
                    }
                    response = void 0;
                    if (!moralisNextAuthHandler_1.authOperationNames.includes(operationName)) return [3 /*break*/, 3];
                    return [4 /*yield*/, (0, moralisNextAuthHandler_1.moralisNextAuthHandler)({ req: req, res: res, authentication: authentication, requestHandler: requestHandler, operation: operation, core: core })];
                case 2:
                    response = _d.sent();
                    return [3 /*break*/, 5];
                case 3: return [4 /*yield*/, requestHandler(deserialisedRequest)];
                case 4:
                    response = _d.sent();
                    _d.label = 5;
                case 5: return [2 /*return*/, res.status(200).json(response)];
                case 6:
                    error_1 = _d.sent();
                    if (!(error_1 instanceof Error)) {
                        return [2 /*return*/, res.status(500).json({ error: FALLBACK_ERROR_MESSAGE })];
                    }
                    statusCode = 500;
                    message = FALLBACK_ERROR_MESSAGE;
                    if ((0, common_core_1.isMoralisError)(error_1) && typeof ((_b = error_1.details) === null || _b === void 0 ? void 0 : _b.status) === 'number') {
                        statusCode = error_1.details.status;
                        message = error_1.message;
                    }
                    serverLogger_1.serverLogger.error("Unknown error in MoralisNextApi: ".concat(error_1.message), { error: error_1 });
                    return [2 /*return*/, res.status(statusCode).json({ error: message })];
                case 7: return [2 /*return*/];
            }
        });
    });
}
var MoralisNextApi = function (_a) {
    var authentication = _a.authentication, config = __rest(_a, ["authentication"]);
    if (!moralis_1.default.Core.isStarted) {
        moralis_1.default.start(config);
    }
    return function (req, res) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
        return [2 /*return*/, MoralisNextHandler({ req: req, res: res, authentication: authentication, core: moralis_1.default.Core })];
    }); }); };
};
exports.default = MoralisNextApi;
//# sourceMappingURL=MoralisNextApi.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getModuleByName = exports.Module = void 0;
var evm_api_1 = require("@moralisweb3/evm-api");
var common_evm_utils_1 = require("moralis/common-evm-utils");
var common_sol_utils_1 = require("moralis/common-sol-utils");
var common_auth_utils_1 = require("@moralisweb3/common-auth-utils");
var auth_1 = require("@moralisweb3/auth");
var sol_api_1 = require("@moralisweb3/sol-api");
var Module = /** @class */ (function () {
    function Module(moduleName, operations) {
        this.moduleName = moduleName;
        this.operations = operations;
    }
    Module.prototype.getOperationByName = function (operationName) {
        var operation = this.operations.find(function (op) { return op.name === operationName; });
        if (!operation) {
            throw new Error("Operation ".concat(operationName, " not found"));
        }
        return operation;
    };
    Module.prototype.getRequestHandler = function (operation, core) {
        var apiModule = core.getModule(this.moduleName);
        var apiGroup = apiModule[operation.groupName];
        if (!apiGroup) {
            throw new Error("Operation ".concat(operation.name, " has no group name in ").concat(this.moduleName));
        }
        var requestHandler = apiGroup[operation.name];
        if (!requestHandler) {
            throw new Error("Operation ".concat(operation.name, " has no requestHandler in ").concat(this.moduleName, ".").concat(apiGroup));
        }
        return requestHandler;
    };
    return Module;
}());
exports.Module = Module;
var modules = [
    new Module(evm_api_1.EvmApi.moduleName, common_evm_utils_1.operations),
    new Module(sol_api_1.SolApi.moduleName, common_sol_utils_1.operations),
    new Module(auth_1.Auth.moduleName, common_auth_utils_1.operations),
];
function getModuleByName(moduleName) {
    var module = modules.find(function (currentModule) { return currentModule.moduleName === moduleName; });
    if (!module) {
        throw new Error("Module ".concat(moduleName, " not found"));
    }
    return module;
}
exports.getModuleByName = getModuleByName;
//# sourceMappingURL=Modules.js.map
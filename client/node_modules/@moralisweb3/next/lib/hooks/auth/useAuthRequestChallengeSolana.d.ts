import { RequestChallengeSolanaRequest } from '@moralisweb3/common-auth-utils';
import { FetchParams } from '../types';
export type RequestChallengeSolanaRequestClient = Pick<RequestChallengeSolanaRequest, 'address' | 'network'>;
export declare const useAuthRequestChallengeSolana: (request?: RequestChallengeSolanaRequestClient, fetchParams?: FetchParams) => {
    challenge: {
        id: string;
        profileId: string;
        message: string;
    } | undefined;
    error: any;
    requestChallengeAsync: (params?: RequestChallengeSolanaRequestClient | undefined) => Promise<{
        id: string;
        profileId: string;
        message: string;
    } | undefined>;
    /**
     * @deprecated use `fetch()` instead
     */
    refetch: () => Promise<{
        id: string;
        profileId: string;
        message: string;
    } | undefined>;
    isFetching: boolean;
    /**
     * @deprecated use `isFetching` instead
     */
    isValidating: boolean;
};
//# sourceMappingURL=useAuthRequestChallengeSolana.d.ts.map
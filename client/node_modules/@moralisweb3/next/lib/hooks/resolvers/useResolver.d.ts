import { Operation } from 'moralis/common-core';
import { FetchParams } from '../types';
export interface useResolverParams<Operation, Request> {
    endpoint: string;
    operation: Operation;
    request: Request;
    fetchParams?: FetchParams;
}
declare const useResolver: <Request_1, Response_1, JSONResponse>({ endpoint, operation, request, fetchParams, }: useResolverParams<Pick<Operation<Request_1, unknown, Response_1, JSONResponse>, "serializeRequest" | "deserializeResponse" | "name">, Request_1>) => {
    data: Response_1 | undefined;
    error: any;
    fetch: (params?: Request_1 | undefined) => Promise<Response_1 | undefined>;
    isFetching: boolean;
};
export default useResolver;
//# sourceMappingURL=useResolver.d.ts.map
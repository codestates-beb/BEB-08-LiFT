import { GetNFTMetadataRequest } from 'moralis/common-sol-utils';
import { FetchParams } from '../../../types';
export declare const useSolNFTMetadata: (request?: GetNFTMetadataRequest, fetchParams?: FetchParams) => {
    data: {
        mint: import("@moralisweb3/common-sol-utils").SolAddress;
        standard: string;
        name: string;
        symbol: string;
        metaplex: {
            metadataUri: string;
            updateAuthority: import("@moralisweb3/common-sol-utils").SolAddress;
            sellerFeeBasisPoints: number;
            primarySaleHappened: boolean;
            isMutable: boolean;
            masterEdition: boolean;
        };
    } | undefined;
    error: any;
    fetch: (params?: GetNFTMetadataRequest | undefined) => Promise<{
        mint: import("@moralisweb3/common-sol-utils").SolAddress;
        standard: string;
        name: string;
        symbol: string;
        metaplex: {
            metadataUri: string;
            updateAuthority: import("@moralisweb3/common-sol-utils").SolAddress;
            sellerFeeBasisPoints: number;
            primarySaleHappened: boolean;
            isMutable: boolean;
            masterEdition: boolean;
        };
    } | undefined>;
    /**
     * @deprecated use `fetch()` instead
     */
    refetch: () => Promise<{
        mint: import("@moralisweb3/common-sol-utils").SolAddress;
        standard: string;
        name: string;
        symbol: string;
        metaplex: {
            metadataUri: string;
            updateAuthority: import("@moralisweb3/common-sol-utils").SolAddress;
            sellerFeeBasisPoints: number;
            primarySaleHappened: boolean;
            isMutable: boolean;
            masterEdition: boolean;
        };
    } | undefined>;
    isFetching: boolean;
    /**
     * @deprecated use `isFetching` instead
     */
    isValidating: boolean;
};
//# sourceMappingURL=useSolNFTMetadata.d.ts.map
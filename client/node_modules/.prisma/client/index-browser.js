
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.12.0
 * Query Engine version: 659ef412370fa3b41cd7bf6e94587c1dfb7f67e7
 */
Prisma.prismaVersion = {
  client: "4.12.0",
  engine: "659ef412370fa3b41cd7bf6e94587c1dfb7f67e7"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.BlockScalarFieldEnum = makeEnum({
  id: 'id',
  FROM_ADDRESS: 'FROM_ADDRESS',
  CREATED_CONTRACT_ADDRESS: 'CREATED_CONTRACT_ADDRESS',
  VALUE: 'VALUE',
  GAS_USED: 'GAS_USED',
  GAS_LIMIT: 'GAS_LIMIT',
  MINED_ON_BLOCK: 'MINED_ON_BLOCK',
  BLOCKHASH: 'BLOCKHASH'
});

exports.Prisma.CartScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  dnftId: 'dnftId',
  amount: 'amount'
});

exports.Prisma.CategoriesScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.NftScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  token_id: 'token_id',
  owner_address: 'owner_address',
  name: 'name',
  description: 'description',
  ipfs_url: 'ipfs_url',
  tx_hash: 'tx_hash',
  category_id: 'category_id',
  createdAt: 'createdAt',
  price: 'price'
});

exports.Prisma.OrderItemScalarFieldEnum = makeEnum({
  id: 'id',
  dnftId: 'dnftId',
  amount: 'amount'
});

exports.Prisma.OrdersScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  orderItemIds: 'orderItemIds',
  receiver: 'receiver',
  createdAt: 'createdAt',
  status: 'status'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TransactionScalarFieldEnum = makeEnum({
  id: 'id',
  SENDER: 'SENDER',
  CREATED_CONTRACT_ADDRESS: 'CREATED_CONTRACT_ADDRESS',
  VALUE: 'VALUE',
  GAS_USED: 'GAS_USED',
  GAS_PRICE: 'GAS_PRICE',
  GAS_LIMIT: 'GAS_LIMIT',
  MINED_IN_BLOCK: 'MINED_IN_BLOCK',
  TXDATA: 'TXDATA'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  address: 'address',
  description: 'description',
  token_id: 'token_id'
});

exports.Prisma.WeatherScalarFieldEnum = makeEnum({
  id: 'id',
  locationID: 'locationID',
  name: 'name',
  latitude: 'latitude',
  longitude: 'longitude'
});

exports.Prisma.WishlistScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  dnftIds: 'dnftIds'
});


exports.Prisma.ModelName = makeEnum({
  categories: 'categories',
  Weather: 'Weather',
  nft: 'nft',
  user: 'user',
  Transaction: 'Transaction',
  Block: 'Block',
  Wishlist: 'Wishlist',
  Cart: 'Cart',
  OrderItem: 'OrderItem',
  Orders: 'Orders'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
